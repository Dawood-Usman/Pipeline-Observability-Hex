// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/cronjob_controller.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CronjobControllerClient is the client API for CronjobController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CronjobControllerClient interface {
	ControlCronjob(ctx context.Context, in *ControlCronjobRequest, opts ...grpc.CallOption) (*ControlCronjobResponse, error)
	GetCronjobStatus(ctx context.Context, in *CronjobStatus, opts ...grpc.CallOption) (*CronjobStatusResponse, error)
}

type cronjobControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCronjobControllerClient(cc grpc.ClientConnInterface) CronjobControllerClient {
	return &cronjobControllerClient{cc}
}

func (c *cronjobControllerClient) ControlCronjob(ctx context.Context, in *ControlCronjobRequest, opts ...grpc.CallOption) (*ControlCronjobResponse, error) {
	out := new(ControlCronjobResponse)
	err := c.cc.Invoke(ctx, "/grpc_server.CronjobController/controlCronjob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronjobControllerClient) GetCronjobStatus(ctx context.Context, in *CronjobStatus, opts ...grpc.CallOption) (*CronjobStatusResponse, error) {
	out := new(CronjobStatusResponse)
	err := c.cc.Invoke(ctx, "/grpc_server.CronjobController/getCronjobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronjobControllerServer is the server API for CronjobController service.
// All implementations must embed UnimplementedCronjobControllerServer
// for forward compatibility
type CronjobControllerServer interface {
	ControlCronjob(context.Context, *ControlCronjobRequest) (*ControlCronjobResponse, error)
	GetCronjobStatus(context.Context, *CronjobStatus) (*CronjobStatusResponse, error)
	mustEmbedUnimplementedCronjobControllerServer()
}

// UnimplementedCronjobControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCronjobControllerServer struct {
}

func (UnimplementedCronjobControllerServer) ControlCronjob(context.Context, *ControlCronjobRequest) (*ControlCronjobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlCronjob not implemented")
}
func (UnimplementedCronjobControllerServer) GetCronjobStatus(context.Context, *CronjobStatus) (*CronjobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronjobStatus not implemented")
}
func (UnimplementedCronjobControllerServer) mustEmbedUnimplementedCronjobControllerServer() {}

// UnsafeCronjobControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CronjobControllerServer will
// result in compilation errors.
type UnsafeCronjobControllerServer interface {
	mustEmbedUnimplementedCronjobControllerServer()
}

func RegisterCronjobControllerServer(s grpc.ServiceRegistrar, srv CronjobControllerServer) {
	s.RegisterService(&CronjobController_ServiceDesc, srv)
}

func _CronjobController_ControlCronjob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlCronjobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronjobControllerServer).ControlCronjob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.CronjobController/controlCronjob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronjobControllerServer).ControlCronjob(ctx, req.(*ControlCronjobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronjobController_GetCronjobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronjobStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronjobControllerServer).GetCronjobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.CronjobController/getCronjobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronjobControllerServer).GetCronjobStatus(ctx, req.(*CronjobStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// CronjobController_ServiceDesc is the grpc.ServiceDesc for CronjobController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CronjobController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_server.CronjobController",
	HandlerType: (*CronjobControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "controlCronjob",
			Handler:    _CronjobController_ControlCronjob_Handler,
		},
		{
			MethodName: "getCronjobStatus",
			Handler:    _CronjobController_GetCronjobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/cronjob_controller.proto",
}
